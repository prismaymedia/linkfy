name: Deploy to Vercel (Production & Preview)

on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  deploy-client:
    name: Deploy Client to Vercel
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./client
        run: vercel pull --yes --environment=${{ github.event_name == 'pull_request' && 'preview' || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./client
        run: vercel build ${{ github.event_name == 'pull_request' && '' || '--prod' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Production)
        id: deploy-prod
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
        working-directory: ./client
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$url" >> $GITHUB_OUTPUT
          echo "✅ Deployed to production: $url"

      - name: Deploy to Vercel (Preview)
        id: deploy-preview
        if: github.event_name == 'pull_request'
        working-directory: ./client
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          echo "✅ Deployed preview: $url"

      - name: Set deployment output
        id: deploy
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "preview-url=${{ steps.deploy-preview.outputs.preview-url }}" >> $GITHUB_OUTPUT
            echo "deployment-url=${{ steps.deploy-preview.outputs.preview-url }}" >> $GITHUB_OUTPUT
          else
            echo "deployment-url=${{ steps.deploy-prod.outputs.deployment-url }}" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const previewUrl = '${{ steps.deploy-preview.outputs.preview-url }}';
            const prNumber = context.issue.number;
            
            const comment = `## 🚀 Vercel Deployment
            
            ### ✅ Client Preview Deployed Successfully!
            
            | Environment | Status | URL |
            |------------|--------|-----|
            | **Client Preview** | ✅ Ready | [Visit Preview](${previewUrl}) |
            
            ### 📊 Deployment Details
            - **Branch**: \`${context.ref}\`
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Triggered by**: @${context.actor}
            - **Environment**: Preview
            
            ### 🔍 Quick Actions
            - [📱 View Client Preview](${previewUrl})
            - [📊 View Deployment Logs](https://vercel.com)
            - [🔄 Re-run Deployment](${context.payload.pull_request.html_url}/checks)
            
            ---
            *Deployed via Vercel • Updated on every commit*`;
            
            // Find existing comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Vercel Deployment')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

